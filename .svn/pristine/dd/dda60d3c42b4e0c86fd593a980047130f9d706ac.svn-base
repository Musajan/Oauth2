package com.qiyun.qy.config.database;

import javax.sql.DataSource;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import com.alibaba.druid.pool.DruidDataSource;

@Configuration
@MapperScan(basePackages = BaseDataSourceConfig.PACKAGE, sqlSessionTemplateRef = "baseSqlSessionTemplate")
public class BaseDataSourceConfig {
	
	// 精确到 master 目录，以便跟其他数据源隔离
    static final String PACKAGE = "com.qiyun.qy.dao.base";
    static final String MAPPER_LOCATION = "classpath:mapper/base/*.xml";
 
    @Value("${datasource.base.url}")
    private String url;
 
    @Value("${datasource.base.username}")
    private String user;
 
    @Value("${datasource.base.password}")
    private String password;
 
    @Value("${datasource.base.driver-class-name}")
    private String driverClass;
 
    @Bean(name = "baseDataSource")
    @Primary
    public DataSource baseDataSource() {
        DruidDataSource dataSource = new DruidDataSource();
        dataSource.setDriverClassName(driverClass);
        dataSource.setUrl(url);
        dataSource.setUsername(user);
        dataSource.setPassword(password);
        return dataSource;
    }
 
    @Bean(name = "baseTransactionManager")
    @Primary
    public DataSourceTransactionManager baseTransactionManager(@Qualifier("baseDataSource") DataSource baseDataSource) {
        return new DataSourceTransactionManager(baseDataSource);
    }
 
    @Bean(name = "baseSqlSessionFactory")
    @Primary
    public SqlSessionFactory masterSqlSessionFactory(@Qualifier("baseDataSource") DataSource baseDataSource)
            throws Exception {
        final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
        sessionFactory.setDataSource(baseDataSource);
        PathMatchingResourcePatternResolver pathMatching = new PathMatchingResourcePatternResolver();
        Resource[] mapperLocations = pathMatching.getResources(MAPPER_LOCATION);
        sessionFactory.setMapperLocations(mapperLocations);
        return sessionFactory.getObject();
    }
    
    @Bean(name = "baseSqlSessionTemplate")
    @Primary
    public SqlSessionTemplate testSqlSessionTemplate(@Qualifier("baseSqlSessionFactory") SqlSessionFactory sqlSessionFactory) throws Exception {
        return new SqlSessionTemplate(sqlSessionFactory);
    }
}
